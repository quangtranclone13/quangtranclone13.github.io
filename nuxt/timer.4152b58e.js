var h=Object.defineProperty;var u=(i,t,e)=>t in i?h(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var n=(i,t,e)=>(u(i,typeof t!="symbol"?t+"":t,e),e);var I=(i=>(i.Timeout="timeout",i.Interval="interval",i))(I||{});const s=class{constructor(){n(this,"_timer");n(this,"timerList",new Map);this._timer=this}static getInstance(){return s.instance||(s.instance=new s),s.instance}static setConfig(t){Object.assign(s.DEFAULT_TIMER_CONFIG,t)}set(t){let e;const l={...s.DEFAULT_TIMER_CONFIG,...t},{id:r,mode:m,handler:c,timeout:o}=l;return this.has(r)&&this.delete(r),m==="interval"?e=setInterval(()=>{c({_timer:this._timer,_id:r})},o):e=setTimeout(()=>{c({_timer:this._timer,_id:r})},o),this.timerList.set(r,{tId:e,mode:m,handler:c}),e}has(t){var e,l;return this.timerList.has(t)&&(l=(e=this.timerList.get(t))==null?void 0:e.tId)!=null?l:null}delete(t){if(this.timerList.has(t)){const e=this.timerList.get(t);e&&(e.mode==="interval"?clearInterval(e.tId):clearTimeout(e.tId),this.timerList.delete(t))}}clear(){if(this.timerList.size){for(const t of this.timerList.values())t.mode==="interval"?clearInterval(t.tId):clearTimeout(t.tId);this.timerList.clear()}}};let a=s;n(a,"DEFAULT_TIMER_CONFIG",{mode:"interval",timeout:300}),n(a,"instance",null);const L=()=>a.getInstance();export{I as T,L as u};
